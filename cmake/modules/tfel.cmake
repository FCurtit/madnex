# find the tfel library

if(TFEL_INSTALL_PATH)
  set(TFELHOME "${TFEL_INSTALL_PATH}")
else(TFEL_INSTALL_PATH)
  set(TFELHOME $ENV{TFELHOME})
endif(TFEL_INSTALL_PATH)

find_program(MFRONT       mfront       "${TFELHOME}/bin")
find_program(TFEL_CONFIG  tfel-config  "${TFELHOME}/bin")

IF(TFEL_CONFIG AND MFRONT)
  EXECUTE_PROCESS(COMMAND ${TFEL_CONFIG} "--includes"
    OUTPUT_VARIABLE TFEL_INCLUDE_PATH
    OUTPUT_STRIP_TRAILING_WHITESPACE)
  EXECUTE_PROCESS(COMMAND ${TFEL_CONFIG} "--cppflags"
    OUTPUT_VARIABLE TFEL_CPPFLAGS
    OUTPUT_STRIP_TRAILING_WHITESPACE)
  EXECUTE_PROCESS(COMMAND ${TFEL_CONFIG} "--libs"
    OUTPUT_VARIABLE TFEL_LIBRARY_PATH
    OUTPUT_STRIP_TRAILING_WHITESPACE)
  STRING(LENGTH ${TFEL_INCLUDE_PATH}  TFEL_INCLUDE_PATH_LENGTH)
  MATH(EXPR TFEL_INCLUDE_PATH_LENGTH "${TFEL_INCLUDE_PATH_LENGTH} - 2")
  STRING(SUBSTRING ${TFEL_INCLUDE_PATH} 2 ${TFEL_INCLUDE_PATH_LENGTH} TFEL_INCLUDE_PATH)
  STRING(LENGTH ${TFEL_LIBRARY_PATH}  TFEL_LIBRARY_PATH_LENGTH)
  MATH(EXPR TFEL_LIBRARY_PATH_LENGTH "${TFEL_LIBRARY_PATH_LENGTH} - 2")
  STRING(SUBSTRING ${TFEL_LIBRARY_PATH} 2 ${TFEL_LIBRARY_PATH_LENGTH} TFEL_LIBRARY_PATH)
  MESSAGE(STATUS "mfront       : ${MFRONT}")
  MESSAGE(STATUS "tfel-config  : ${TFEL_CONFIG}")
  MESSAGE(STATUS "tfel include : ${TFEL_INCLUDE_PATH}")
  MESSAGE(STATUS "tfel libs    : ${TFEL_LIBRARY_PATH}")
  SET(HAVE_TFEL ON)
  ADD_DEFINITIONS("${TFEL_CPPFLAGS}")
ELSE(TFEL_CONFIG AND MFRONT)
  MESSAGE(FATAL_ERROR "tfel not found")
ENDIF(TFEL_CONFIG AND MFRONT)
